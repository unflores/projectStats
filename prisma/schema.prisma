// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id        Int      @id @default(autoincrement())
  analyses  Analysis[]
  name      String
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  @@unique([name])
  @@map("projects")
}

model Analysis {
  id         Int      @id @default(autoincrement())
  // Segment is a way of splitting an analysis into smaller parts
  // This was written to split LOC analyses by language
  segment    String?   @map("segment")
  type       String
  projectId  Int      @map("project_id")
  project    Project  @relation(fields: [projectId], references: [id])
  occurances Occurance[]
  createdAt  DateTime @map("created_at") @default(now())
  updatedAt  DateTime @map("updated_at") @updatedAt

  @@index([projectId])
  @@unique([projectId, type, segment])
  @@map("analyses")
}

model Occurance {
  id         Int      @id @default(autoincrement())
  amount     Int      @map("amount") @default(1)
  externalId String   @map("external_id")
  occurredAt DateTime @map("occurred_at")
  analysisId Int      @map("analysis_id")
  analysis   Analysis @relation(fields: [analysisId], references: [id])
  createdAt  DateTime @map("created_at") @default(now())
  updatedAt  DateTime @map("updated_at") @updatedAt

  @@unique([analysisId, externalId])
  @@index([occurredAt])
  @@index([analysisId])
  @@map("occurances")
}
